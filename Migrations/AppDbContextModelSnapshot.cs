// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebRentManager.Models;

namespace WebRentManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebRentManager.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyType")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngineSize")
                        .HasColumnType("int");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<int>("GearboxType")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Milage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NextServiceMilage")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextTechCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PowerHP")
                        .HasColumnType("int");

                    b.Property<int>("PowerkW")
                        .HasColumnType("int");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservedUntil")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceInterval")
                        .HasColumnType("int");

                    b.Property<string>("SpecType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsServiceInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("WebRentManager.Models.CarDamage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMarked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEndDamage")
                        .HasColumnType("bit");

                    b.Property<double>("OffsetX")
                        .HasColumnType("float");

                    b.Property<double>("OffsetY")
                        .HasColumnType("float");

                    b.Property<Guid>("RentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarDamages");
                });

            modelBuilder.Entity("WebRentManager.Models.CarDamageFile", b =>
                {
                    b.Property<Guid>("CarDamageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarDamageId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("CarDamageFile");
                });

            modelBuilder.Entity("WebRentManager.Models.CarExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CarExpenses");
                });

            modelBuilder.Entity("WebRentManager.Models.CarExpenseFile", b =>
                {
                    b.Property<Guid>("CarExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarExpenseId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("CarExpenseFile");
                });

            modelBuilder.Entity("WebRentManager.Models.CarFile", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("CarFile");
                });

            modelBuilder.Entity("WebRentManager.Models.CashDeposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CashDeposits");
                });

            modelBuilder.Entity("WebRentManager.Models.CashDepositAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountAfterAction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountBeforeAction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CashDepositId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPayment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CashDepositId");

                    b.ToTable("CashDepositActions");
                });

            modelBuilder.Entity("WebRentManager.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<string>("IdNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("WebRentManager.Models.ClientFile", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("ClientFile");
                });

            modelBuilder.Entity("WebRentManager.Models.FileDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackblazeFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Ext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FileDescriptions");
                });

            modelBuilder.Entity("WebRentManager.Models.FinancialInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EndBuyoutNetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LeaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaseTime")
                        .HasColumnType("int");

                    b.Property<string>("LeaseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyLeaseFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StartNetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.ToTable("FinancialInfos");
                });

            modelBuilder.Entity("WebRentManager.Models.HandoverDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndClientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndCompanySignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndFireEx")
                        .HasColumnType("bit");

                    b.Property<int>("EndFuel")
                        .HasColumnType("int");

                    b.Property<bool>("EndManual")
                        .HasColumnType("bit");

                    b.Property<int>("EndMilage")
                        .HasColumnType("int");

                    b.Property<string>("EndNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EndRepairSet")
                        .HasColumnType("bit");

                    b.Property<bool>("EndService")
                        .HasColumnType("bit");

                    b.Property<bool>("EndSpare")
                        .HasColumnType("bit");

                    b.Property<bool>("EndTriangle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTermAccepted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartCientSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartCompanySignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StartFireEx")
                        .HasColumnType("bit");

                    b.Property<int>("StartFuel")
                        .HasColumnType("int");

                    b.Property<bool>("StartManual")
                        .HasColumnType("bit");

                    b.Property<int>("StartMilage")
                        .HasColumnType("int");

                    b.Property<string>("StartNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StartRepairSet")
                        .HasColumnType("bit");

                    b.Property<bool>("StartService")
                        .HasColumnType("bit");

                    b.Property<bool>("StartSpare")
                        .HasColumnType("bit");

                    b.Property<bool>("StartTriangle")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("HandoverDocuments");
                });

            modelBuilder.Entity("WebRentManager.Models.HandoverDocumentFile", b =>
                {
                    b.Property<Guid>("HandoverDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HandoverDocumentId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("HandoverDocumentFile");
                });

            modelBuilder.Entity("WebRentManager.Models.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncomeType")
                        .HasColumnType("int");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("WebRentManager.Models.InsuranceClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClaimNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClaimStatus")
                        .HasColumnType("int");

                    b.Property<int>("ClaimType")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RepresentativeMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativePhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InsuranceClaims");
                });

            modelBuilder.Entity("WebRentManager.Models.InsuranceClaimFile", b =>
                {
                    b.Property<Guid>("InsuranceClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InsuranceClaimId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("InsuranceClaimFile");
                });

            modelBuilder.Entity("WebRentManager.Models.InsurancePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("InsurancePolicies");
                });

            modelBuilder.Entity("WebRentManager.Models.InsurancePolicyFile", b =>
                {
                    b.Property<Guid>("InsurancePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InsurancePolicyId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("InsurancePolicyFile");
                });

            modelBuilder.Entity("WebRentManager.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("WebRentManager.Models.MailMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MailMessages");
                });

            modelBuilder.Entity("WebRentManager.Models.MilageRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Milage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("MilageRecords");
                });

            modelBuilder.Entity("WebRentManager.Models.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AssistanceIncluded")
                        .HasColumnType("bit");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DamageFee")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandoverDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HandoverDocumentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InitialPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndDateSet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("MilageLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("OverMilageFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RentFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RentType")
                        .HasColumnType("int");

                    b.Property<int>("RentingCompany")
                        .HasColumnType("int");

                    b.Property<bool>("ReplacementCarIncluded")
                        .HasColumnType("bit");

                    b.Property<bool>("ServiceIncluded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TyresIncluded")
                        .HasColumnType("bit");

                    b.Property<string>("UserMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HandoverDocumentId1");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("WebRentManager.Models.RentFile", b =>
                {
                    b.Property<Guid>("RentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RentId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("RentFile");
                });

            modelBuilder.Entity("WebRentManager.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Milage")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("WebRentManager.Models.ServiceFile", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceId", "FileDescriptionId");

                    b.HasIndex("FileDescriptionId");

                    b.ToTable("ServiceFile");
                });

            modelBuilder.Entity("WebRentManager.Models.TyreInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Diameter")
                        .HasColumnType("int");

                    b.Property<int>("Dot")
                        .HasColumnType("int");

                    b.Property<int>("Profile")
                        .HasColumnType("int");

                    b.Property<string>("SpeedIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TyreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TyreShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TyreStatus")
                        .HasColumnType("int");

                    b.Property<int>("TyreType")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("TyreShopId");

                    b.ToTable("TyreInfos");
                });

            modelBuilder.Entity("WebRentManager.Models.TyreShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaturdayHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SundayHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TyreShops");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.CarDamage", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.CarDamageFile", b =>
                {
                    b.HasOne("WebRentManager.Models.CarDamage", "CarDamage")
                        .WithMany("CarDamageFiles")
                        .HasForeignKey("CarDamageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("CarDamageFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.CarExpenseFile", b =>
                {
                    b.HasOne("WebRentManager.Models.CarExpense", "CarExpense")
                        .WithMany("CarExpenseFiles")
                        .HasForeignKey("CarExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("CarExpenseFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.CarFile", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", "Car")
                        .WithMany("CarFiles")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("CarFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.CashDepositAction", b =>
                {
                    b.HasOne("WebRentManager.Models.CashDeposit", null)
                        .WithMany("DepositActions")
                        .HasForeignKey("CashDepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.ClientFile", b =>
                {
                    b.HasOne("WebRentManager.Models.Client", "Client")
                        .WithMany("ClientFiles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("ClientFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.FinancialInfo", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", null)
                        .WithOne("FinancialInfo")
                        .HasForeignKey("WebRentManager.Models.FinancialInfo", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.HandoverDocumentFile", b =>
                {
                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("HandoverDocumentFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.HandoverDocument", "HandoverDocument")
                        .WithMany("HandoverDocumentFiles")
                        .HasForeignKey("HandoverDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.Income", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("WebRentManager.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.InsuranceClaimFile", b =>
                {
                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("InsuranceClaimFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.InsuranceClaim", "InsuranceClaim")
                        .WithMany("InsuranceClaimFiles")
                        .HasForeignKey("InsuranceClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.InsurancePolicy", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.InsurancePolicyFile", b =>
                {
                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("InsurancePolicyFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany("InsurancePolicyFiles")
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.Invoice", b =>
                {
                    b.HasOne("WebRentManager.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany()
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.MilageRecord", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", null)
                        .WithMany("MilageHistory")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.Rent", b =>
                {
                    b.HasOne("WebRentManager.Models.HandoverDocument", "HandoverDocument")
                        .WithMany()
                        .HasForeignKey("HandoverDocumentId1");
                });

            modelBuilder.Entity("WebRentManager.Models.RentFile", b =>
                {
                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("RentFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.Rent", "Rent")
                        .WithMany("RentFiles")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.Service", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", "Car")
                        .WithMany("Services")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.ServiceFile", b =>
                {
                    b.HasOne("WebRentManager.Models.FileDescription", "FileDescription")
                        .WithMany("ServiceFiles")
                        .HasForeignKey("FileDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.Service", "Service")
                        .WithMany("ServiceFiles")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebRentManager.Models.TyreInfo", b =>
                {
                    b.HasOne("WebRentManager.Models.Car", "Car")
                        .WithMany("TyreInfos")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebRentManager.Models.TyreShop", "TyreShop")
                        .WithMany()
                        .HasForeignKey("TyreShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
